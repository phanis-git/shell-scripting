Why is scripting?
Automation , Devops main goal is Speed and accuracy.

In Automation also we get :
speed,
Accuracy , no human errors
Consistency
Scalabality - we can deal many servers at a time
Documentation

We cannot place scripts in laptop , because if laptop any damage we lose all the scripts
We cannot place scripts in server , because if server crash we lose all the scripts
So to avoid the above , we place those at repositories in git and github

Before git and github we have centralized architecture (SVN) SUB VERSION CONTROL but there are many disadvantages of centralized 
All the developers should work on one place , if the central repo crash , there is no backup.


Git:- Git is a concept . Git is decentralized in architecture
For reducing the disadvantages in centralized architecture we have git
In Git we have local repo and central repo 
First we will write the code and we will push to local repo and then central repo
So if central repo fails , we can take the local repo code and we can arrange the central repo
If local repo fails, we can take code from central repo

In Git we have staging area - local repo - central repo or Remote repo
Github - It is open source
Bitbucket
Gitlab   
These are Git implementations

In Git first we need to create New repositories - It means creating a folder in github server
Taking the created repo into laptops or local we need to clone by using git clone command
git clone <repo-url>
We can use gitbash for connecting to github servers

Difference between Normal folder and Git repo
Git repo contains .git folder and normal folder doesnot have .

vscode -> workspace -> staging area -> commit to local repo -> central repo

What is staging area ?
It is a temporary area where we stage the required files for commit , still we have a chance to take back into workspace

What is local commit ?
commit into local repo nothing but laptop. 
- commit time will be logged
- who committed will be logged 
- why committed will be logged

Push to central repo or Remote repo ?
push to central repo then others can just do git pull to take those changes.

Difference between Git clone and git pull?
Git clone is cloning the entire repo from scratch , here we will do only once at first time 
Git pull is pulling the changes that are made . not all the code will clone only changes will get




#!/bin/bash   ---> shebang , it should be the first line in shell script file , it acts like interpreter to check
the syntax of the script and execute them 

shell script file extension is .sh
we can run the file with                 sh hello-world.sh



# passing arguments to variables dynamically outside the scripts.
person1=$1
person2=$2


Environment variables:-
------------------------

temporary Environment varialbels:-
---------------------------------

# Here export is the keyword used to set the Environment variables
Environment variables are holding the values until the process is alive , it is accessible for sub process also.
We can access both inside and outside the shell
export courseName="DevSecOps"


Permanent Environment varialbels:-
---------------------------------

Here we have a file at root level
.bashrc 

with in the above file we need to add the variables with values and then we need to source it

export courseNm="Shell scripting"
source .bashrc
Now to check with exit and with out exit it will override with the permanent value




# Commands or Linux commands executing inside the shell script file
fromDt=$(command)      ---- here fromDt is variable name ,
                            command is linux commands and $ is used to assign the command output value to variable


ex: currentDt=$(date)
we can pass the arguments kind for getting date as formatted 
ex: currentDate=$(date +%F)
    currentDate=$(date +%Y-%m-%d)


Special variables
-----------------
$* , $@
these are the special variables where we can pass the values dynamically while running the script ,
these variables will hold the values
Ex: sh hello-world.sh  phani kiran    // output :-   phani kiran

$0  -----> It will give the script file name
$PWD   ---> It will give the current working directory name
$USER   ----> It will give the current user or who ever running the script there name
$HOME   -----> It will give the home directory of current user
$$   ----> Process Instance Id (PID) for the current extension script
$!   ----> PID for last command in background
ex:- sleep 10 &
ps -ef | grep sleep



Datatypes
---------
Everything in shell considered as string , but while using the priority changes and shell will understand what to do
ex: num1=10
    num2=30
    sum=$(($num1+$num2))     // here the output is 30
    name="Phani"
    total=$(($num1+$num2+$name))     // here also it will give 30 and as it is string it consider as 0

Array
-----
names=("Phani" "Kiran")
${names[0]}   // accessing the 0 index value 
${names[@]}  // accessing all the values 


Conditions
----------
syntax: if [ Condition ]; then 
        fi 

syntax: if [ Condition ]; then 
            //
        else
            //
        fi

syntax: if [ Condition ]; then 
            //
        elif [ Condition ]; then
            //
        else
            //
        fi

-lt   ---> less than
-gt   ----> greater than
-eq   ---> equal to
-ne  ----> not equal



Exit status:-
------------
If something we did in command line and if we want to know the result of that command we use exit codes
0 ----> success
1 to 127  ----> failure




